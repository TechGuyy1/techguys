<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{color:#0563C1;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=EN-IN link="#0563C1" vlink="#954F72" style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoNormal><b><span style='font-size:14.0pt;line-height:107%;
background:darkcyan'>Java OOPs – Object oriented programming system:</span></b></p>

<p class=MsoNormal> Java oops are the pillar or the foundation of the language.
Following are the main object-oriented concepts in JAVA.</p>

<p class=MsoNormal>They help in designing programs using real world entities
like objects and class.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>Class</span></b></p>

<p class=MsoListParagraphCxSpMiddle>Class is blueprint for creating an object,
it defines the properties and behaviours.</p>

<p class=MsoListParagraphCxSpMiddle><img width=451 height=163
src="Java%20OOPs_files/image001.png"></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>Object</span></b></p>

<p class=MsoListParagraphCxSpMiddle>Object is an instance of a class, represent
the real-world entity. In below examples <b><span style='background:yellow'>myCar</span></b>
is an object of class car. It is accessing the properties of a class i.e. <b><span
style='background:yellow'>variable</span></b> colour and behaviour i.e. drive
method.</p>

<p class=MsoListParagraphCxSpMiddle><img width=206 height=96
src="Java%20OOPs_files/image002.png"></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>Inheritance </span></b></p>

<p class=MsoListParagraphCxSpMiddle>Inheritance allows us to inherit the
properties and method from one class to another class, It’s support code
reusability.</p>

<p class=MsoListParagraphCxSpMiddle><span style='background:darkcyan'>How?</span> 
Using <span style='background:yellow'>extends</span> keyword one class can extends
a propertied of another class </p>

<p class=MsoListParagraphCxSpMiddle><a
href="https://github.com/TechGuyy1/basicjava/tree/9d31273ba76a016e8ac2237ea2be8f290f69b109/abcBank">Examples:</a>
 Here in an example BanAccount.java extends the parent class BankCustomerInfo, </p>

<p class=MsoListParagraphCxSpMiddle><img border=0 width=227 height=92
src="Java%20OOPs_files/image003.png"></p>

<p class=MsoListParagraphCxSpMiddle>Hence using the object of BankAccount class
we are able to access the BankCustomerInfo class method, displayCustInfo(). As
shown in bellow example.</p>

<p class=MsoListParagraphCxSpMiddle><img border=0 width=601 height=75
src="Java%20OOPs_files/image004.png"></p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>Polymorphism</span></b></p>

<p class=MsoListParagraphCxSpMiddle>In java polymorphism is core concept which allows
us to create methods with the same name but different implementation.</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle><b><span style='background:teal'>Types of
polymorphism:</span></b></p>

<p class=MsoListParagraphCxSpMiddle><span style='background:darkgray'>&nbsp;</span></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt;text-indent:-18.0pt'><b>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></b><b><span
style='background:yellow'>Compile time polymorphism/</span></b><span
style='background:yellow'>Overloading</span> [Method name same &amp; signature
different]</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>All
the method name should be same and implemented in same class, it should differ
with its return type and input parameter(signature). </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Only
the method name is same, as show in below <b>example</b>.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'>c)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>During
the compile time only we will get to know which method is being called.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'>d)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>If
we write everything same i.e. method name, return type and argument in same
class then the compiler will give us an error.</p>

<p class=MsoListParagraphCxSpMiddle><img border=0 width=336 height=208
src="Java%20OOPs_files/image005.png"></p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt;text-indent:-18.0pt'><b>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></b><b><span
style='background:yellow'>  Run time polymorphism </span></b><span
style='background:yellow'>/Overriding / Dynamic Binding</span> </p>

<p class=MsoListParagraphCxSpMiddle><b>&nbsp;</b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Overriding
is done when child or subclass has <b>same method</b> name, <b>return type</b>
and <b>arguments</b> as the parent class method.</p>

<p class=MsoListParagraphCxSpLast style='margin-left:72.0pt;text-indent:-18.0pt'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
method to be called is determined based on the object which is being referred
to by the reference variable(object).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoListParagraphCxSpFirst><a
href="https://github.com/TechGuyy1/basicjava/tree/9d31273ba76a016e8ac2237ea2be8f290f69b109/abcBank">Examples:</a> 
Here in an example BanAccount.java extends the parent class BankCustomerInfo, </p>

<p class=MsoListParagraphCxSpMiddle><img border=0 width=227 height=92
src="Java%20OOPs_files/image006.png"></p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle>displayCustInfo() method is overridden in
BankAccount.java.</p>

<p class=MsoListParagraphCxSpMiddle><img border=0 width=602 height=132
src="Java%20OOPs_files/image007.png"></p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle><b>Output </b></p>

<p class=MsoListParagraphCxSpMiddle><img border=0 width=430 height=45
src="Java%20OOPs_files/image008.png"></p>

<p class=MsoListParagraphCxSpLast>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoListParagraphCxSpFirst style='margin-left:72.0pt'>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'><b><span
style='background:darkgray'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='background:darkgray'>Encapsulation </span></b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt;text-indent:-18.0pt'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Encapsulation
is wrapping or bundling a data and methods withing single unit, example class.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt;text-indent:-18.0pt'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Access
modifiers help us to encapsulate the data.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt;text-indent:-18.0pt'>c)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Here
in bank class example, we have declared a variable bankBalance as private,
hence it is not accessible outside the class, but we can access it in extended
class using public getter or setter method. (We need to create a public method
to set the bankBalance and similarly public get method).</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt'>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt'><a
href="https://github.com/TechGuyy1/basicjava/tree/9d31273ba76a016e8ac2237ea2be8f290f69b109/abcBank">Examples:</a>
</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt'>bankBalance is
private in BankAccount directly we cannot access in InternetBanking Class.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt'>With the help of
public method setCustInfo and cashDeposit we are able to retrieve it in
InternetBanking class.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt'><img border=0
width=547 height=216 src="Java%20OOPs_files/image009.png"></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt'>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpLast>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='font-size:12.0pt;line-height:107%;background:darkgray'>Abstraction</span></b></p>

<p class=MsoListParagraphCxSpMiddle><b><span style='font-size:12.0pt;
line-height:107%;background:darkgray'>&nbsp;</span></b></p>

<p class=MsoListParagraphCxSpMiddle><b><span lang=EN-US>Abstraction is a
process of hiding implements details from the user, only the functionality is
provided to the user. In other words, the user will have the information on
what object dose instead of how its dose.</span></b></p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle>Abstraction in Java is performed in two
ways</p>

<p class=MsoListParagraphCxSpLast style='margin-left:54.0pt;text-indent:-18.0pt'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span
style='background:aqua'>Abstract Class</span></b>         2<span
style='background:aqua'>.<b> Interface</b></span> </p>

<p class=MsoNormal style='margin-left:36.0pt'><b><span style='background:yellow'>&nbsp;</span></b></p>

<p class=MsoNormal style='margin-left:36.0pt'><b><span style='background:yellow'>Abstract
Class</span></b></p>

<p class=MsoListParagraphCxSpFirst>An abstract class is a class that has been
declared as abstract. It might include both abstract and non-abstract methods. </p>

<p class=MsoListParagraphCxSpMiddle>It needs to be expanded and its method
implemented. </p>

<p class=MsoListParagraphCxSpMiddle>Final methods can prevent subclasses from
changing their methods' contents.</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle><b><span style='background:darkcyan'>Key
Points:</span></b></p>

<p class=MsoListParagraphCxSpMiddle>An abstract class must be declared with the
<b>abstract</b> keyword.</p>

<p class=MsoListParagraphCxSpMiddle>It can have <b>abstract</b> and <b>non-abstract</b>
methods.</p>

<p class=MsoListParagraphCxSpMiddle>It cannot be instantiated.</p>

<p class=MsoListParagraphCxSpMiddle>It can have final methods.</p>

<p class=MsoListParagraphCxSpMiddle>It can also have constructors and static
methods.</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle><b><span style='background:darkcyan'>Abstract
Method</span> </b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:Symbol'><img width=12 height=12
src="file:///C:/Users/AKANKSHA/AppData/Local/Temp/F4E20F16.gif" alt="*"><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>In
Java, an abstract method is declared but not implemented. It is specified
within an abstract class and must be overridden by its subclasses. </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:Symbol'><img width=12 height=12
src="file:///C:/Users/AKANKSHA/AppData/Local/Temp/F4E20F16.gif" alt="*"><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>An
abstract method is intended to be a placeholder that enforces specific
behaviour in subclasses. </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:72.0pt;text-indent:-18.0pt'><span
style='font-family:Symbol'><img width=12 height=12
src="file:///C:/Users/AKANKSHA/AppData/Local/Temp/F4E20F16.gif" alt="*"><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>It
serves a useful purpose when the desired behaviour of the method should remain
consistent while allowing different implementations within different classes.</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle><b><span lang=EN-US style='font-size:12.0pt;
line-height:107%;background:yellow'>Interface</span></b></p>

<p class=MsoListParagraphCxSpMiddle><b><span lang=EN-US style='font-size:12.0pt;
line-height:107%'>By using interface, we can achieve 100% abstraction.</span></b></p>

<p class=MsoListParagraphCxSpMiddle><b><span lang=EN-US style='font-size:12.0pt;
line-height:107%'>Java dose not permit multiple inheritance for classes, utilizing
interface allows for multiple inheritance.</span></b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:54.0pt;text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Using <b><span style='color:#833C0B'>interface</span></b>
keyword, we can create an <b><span lang=EN-US style='font-size:12.0pt;
line-height:107%'>interface.</span></b> All method should be abstract method
that means we just need to declare method. </p>

<p class=MsoListParagraphCxSpLast style='margin-left:54.0pt;text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In <b><span lang=EN-US style='font-size:12.0pt;line-height:107%'>interface</span></b><span
lang=EN-US> </span>it mandatory to use the public access specifier, as we need
to implement those abstract methods in child class.</p>

<p class=MsoNormal><b>Example:</b> In NRIBankingAccount interface currencyExchange
method is declared. Its implementation is done in Bankaccount class.</p>

<p class=MsoNormal><a
href="https://github.com/TechGuyy1/basicjava/tree/9d31273ba76a016e8ac2237ea2be8f290f69b109/abcBank">https://github.com/TechGuyy1/basicjava/tree/9d31273ba76a016e8ac2237ea2be8f290f69b109/abcBank</a></p>

<p class=MsoNormal style='margin-left:36.0pt'><img border=0 width=602
height=168 src="Java%20OOPs_files/image010.png"></p>

<p class=MsoListParagraphCxSpFirst><b>Implementation</b></p>

<p class=MsoListParagraphCxSpLast><img border=0 width=601 height=208
id="Picture 1" src="Java%20OOPs_files/image011.png"></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=301 valign=top style='width:225.4pt;border:solid windowtext 3.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpFirst style='margin-bottom:8.0pt;line-height:
  107%'><b><span lang=EN-US>Interfaces</span></b></p>
  </td>
  <td width=301 valign=top style='width:225.4pt;border:solid windowtext 3.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpLast style='margin-bottom:8.0pt;line-height:
  107%'><b><span lang=EN-US>Abstraction</span></b></p>
  </td>
 </tr>
 <tr>
  <td width=301 valign=top style='width:225.4pt;border-top:none;border-left:
  double windowtext 9.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpFirst style='margin-bottom:8.0pt;text-indent:
  -18.0pt;line-height:107%'><span lang=EN-US style='font-family:Symbol'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span><span lang=EN-US>All Methods are abstracts </span></p>
  </td>
  <td width=301 valign=top style='width:225.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:double windowtext 9.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpLast style='margin-bottom:8.0pt;text-indent:
  -18.0pt;line-height:107%'><span lang=EN-US style='font-family:Symbol'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span><span lang=EN-US>If class have implemented method and
  non-implemented method that class called as abstract class.</span></p>
  </td>
 </tr>
 <tr>
  <td width=301 valign=top style='width:225.4pt;border-top:none;border-left:
  double windowtext 9.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpFirst style='margin-bottom:8.0pt;text-indent:
  -18.0pt;line-height:107%'><span lang=EN-US style='font-family:Symbol'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span><span lang=EN-US>Access specifier must be a <b>public</b>,
  variable defined must be <b>public</b>, <b>static</b> and <b>final</b></span></p>
  </td>
  <td width=301 valign=top style='width:225.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:double windowtext 9.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpMiddle style='margin-bottom:8.0pt;text-indent:
  -18.0pt;line-height:107%'><span lang=EN-US style='font-family:Symbol'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span><b><span lang=EN-US>Private</span></b><span lang=EN-US> access
  is not allowed in the abstraction.</span></p>
  <p class=MsoListParagraphCxSpLast style='margin-bottom:8.0pt;text-indent:
  -18.0pt;line-height:107%'><span lang=EN-US style='font-family:Symbol'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span><span lang=EN-US>Except private variable we can have any access
  specifier.</span></p>
  </td>
 </tr>
 <tr>
  <td width=301 valign=top style='width:225.4pt;border-top:none;border-left:
  double windowtext 9.0pt;border-bottom:double windowtext 9.0pt;border-right:
  solid windowtext 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpFirst style='margin-bottom:8.0pt;text-indent:
  -18.0pt;line-height:107%'><span lang=EN-US style='font-family:Symbol'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span><span lang=EN-US>To implement an interface, we use <b><span
  style='color:#00B050'>implements</span></b> Keywords.</span></p>
  </td>
  <td width=301 valign=top style='width:225.4pt;border-top:none;border-left:
  none;border-bottom:double windowtext 9.0pt;border-right:double windowtext 9.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraphCxSpLast style='margin-bottom:8.0pt;text-indent:
  -18.0pt;line-height:107%'><span lang=EN-US style='font-family:Symbol'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span><b><span lang=EN-US style='color:#00B050'>extends</span></b><span
  lang=EN-US style='color:#00B050'> </span><span lang=EN-US>keyword is used to
  implement </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
